package org.qlcc.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestTableAllPropertiesEquals(RequestTable expected, RequestTable actual) {
        assertRequestTableAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestTableAllUpdatablePropertiesEquals(RequestTable expected, RequestTable actual) {
        assertRequestTableUpdatableFieldsEquals(expected, actual);
        assertRequestTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestTableAutoGeneratedPropertiesEquals(RequestTable expected, RequestTable actual) {
        assertThat(expected)
            .as("Verify RequestTable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestTableUpdatableFieldsEquals(RequestTable expected, RequestTable actual) {
        assertThat(expected)
            .as("Verify RequestTable relevant properties")
            .satisfies(e -> assertThat(e.getCreateAt()).as("check createAt").isEqualTo(actual.getCreateAt()))
            .satisfies(e -> assertThat(e.getUpdateAt()).as("check updateAt").isEqualTo(actual.getUpdateAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getUserId()).as("check userId").isEqualTo(actual.getUserId()))
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getReply()).as("check reply").isEqualTo(actual.getReply()))
            .satisfies(e -> assertThat(e.getNote()).as("check note").isEqualTo(actual.getNote()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestTableUpdatableRelationshipsEquals(RequestTable expected, RequestTable actual) {
        assertThat(expected)
            .as("Verify RequestTable relationships")
            .satisfies(e -> assertThat(e.getNotificationTable()).as("check notificationTable").isEqualTo(actual.getNotificationTable()));
    }
}

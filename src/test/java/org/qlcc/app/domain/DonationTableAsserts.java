package org.qlcc.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DonationTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDonationTableAllPropertiesEquals(DonationTable expected, DonationTable actual) {
        assertDonationTableAutoGeneratedPropertiesEquals(expected, actual);
        assertDonationTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDonationTableAllUpdatablePropertiesEquals(DonationTable expected, DonationTable actual) {
        assertDonationTableUpdatableFieldsEquals(expected, actual);
        assertDonationTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDonationTableAutoGeneratedPropertiesEquals(DonationTable expected, DonationTable actual) {
        assertThat(expected)
            .as("Verify DonationTable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDonationTableUpdatableFieldsEquals(DonationTable expected, DonationTable actual) {
        assertThat(expected)
            .as("Verify DonationTable relevant properties")
            .satisfies(e -> assertThat(e.getCreateAt()).as("check createAt").isEqualTo(actual.getCreateAt()))
            .satisfies(e -> assertThat(e.getUpdateAt()).as("check updateAt").isEqualTo(actual.getUpdateAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()))
            .satisfies(e -> assertThat(e.getDonationId()).as("check donationId").isEqualTo(actual.getDonationId()))
            .satisfies(e -> assertThat(e.getDonationType()).as("check donationType").isEqualTo(actual.getDonationType()))
            .satisfies(e -> assertThat(e.getDonationDesc()).as("check donationDesc").isEqualTo(actual.getDonationDesc()))
            .satisfies(e -> assertThat(e.getDonationMonth()).as("check donationMonth").isEqualTo(actual.getDonationMonth()))
            .satisfies(e -> assertThat(e.getDonationCost()).as("check donationCost").isEqualTo(actual.getDonationCost()))
            .satisfies(e -> assertThat(e.getRoomId()).as("check roomId").isEqualTo(actual.getRoomId()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDonationTableUpdatableRelationshipsEquals(DonationTable expected, DonationTable actual) {
        assertThat(expected)
            .as("Verify DonationTable relationships")
            .satisfies(e -> assertThat(e.getRoomTable()).as("check roomTable").isEqualTo(actual.getRoomTable()));
    }
}

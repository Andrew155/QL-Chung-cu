package org.qlcc.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VehicleTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleTableAllPropertiesEquals(VehicleTable expected, VehicleTable actual) {
        assertVehicleTableAutoGeneratedPropertiesEquals(expected, actual);
        assertVehicleTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleTableAllUpdatablePropertiesEquals(VehicleTable expected, VehicleTable actual) {
        assertVehicleTableUpdatableFieldsEquals(expected, actual);
        assertVehicleTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleTableAutoGeneratedPropertiesEquals(VehicleTable expected, VehicleTable actual) {
        assertThat(expected)
            .as("Verify VehicleTable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleTableUpdatableFieldsEquals(VehicleTable expected, VehicleTable actual) {
        assertThat(expected)
            .as("Verify VehicleTable relevant properties")
            .satisfies(e -> assertThat(e.getCreateAt()).as("check createAt").isEqualTo(actual.getCreateAt()))
            .satisfies(e -> assertThat(e.getUpdateAt()).as("check updateAt").isEqualTo(actual.getUpdateAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()))
            .satisfies(e -> assertThat(e.getVehicleName()).as("check vehicleName").isEqualTo(actual.getVehicleName()))
            .satisfies(e -> assertThat(e.getVehicleType()).as("check vehicleType").isEqualTo(actual.getVehicleType()))
            .satisfies(e -> assertThat(e.getVehicleId()).as("check vehicleId").isEqualTo(actual.getVehicleId()))
            .satisfies(e -> assertThat(e.getRoomId()).as("check roomId").isEqualTo(actual.getRoomId()))
            .satisfies(e -> assertThat(e.getOwnerId()).as("check ownerId").isEqualTo(actual.getOwnerId()))
            .satisfies(e -> assertThat(e.getVehicleFee()).as("check vehicleFee").isEqualTo(actual.getVehicleFee()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVehicleTableUpdatableRelationshipsEquals(VehicleTable expected, VehicleTable actual) {
        assertThat(expected)
            .as("Verify VehicleTable relationships")
            .satisfies(e -> assertThat(e.getRoomTable()).as("check roomTable").isEqualTo(actual.getRoomTable()));
    }
}

package org.qlcc.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CitizenTableAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenTableAllPropertiesEquals(CitizenTable expected, CitizenTable actual) {
        assertCitizenTableAutoGeneratedPropertiesEquals(expected, actual);
        assertCitizenTableAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenTableAllUpdatablePropertiesEquals(CitizenTable expected, CitizenTable actual) {
        assertCitizenTableUpdatableFieldsEquals(expected, actual);
        assertCitizenTableUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenTableAutoGeneratedPropertiesEquals(CitizenTable expected, CitizenTable actual) {
        assertThat(expected)
            .as("Verify CitizenTable auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenTableUpdatableFieldsEquals(CitizenTable expected, CitizenTable actual) {
        assertThat(expected)
            .as("Verify CitizenTable relevant properties")
            .satisfies(e -> assertThat(e.getCreateAt()).as("check createAt").isEqualTo(actual.getCreateAt()))
            .satisfies(e -> assertThat(e.getUpdateAt()).as("check updateAt").isEqualTo(actual.getUpdateAt()))
            .satisfies(e -> assertThat(e.getDeletedAt()).as("check deletedAt").isEqualTo(actual.getDeletedAt()))
            .satisfies(e -> assertThat(e.getCitizenID()).as("check citizenID").isEqualTo(actual.getCitizenID()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDob()).as("check dob").isEqualTo(actual.getDob()))
            .satisfies(e -> assertThat(e.getContact()).as("check contact").isEqualTo(actual.getContact()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getRelation()).as("check relation").isEqualTo(actual.getRelation()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCitizenTableUpdatableRelationshipsEquals(CitizenTable expected, CitizenTable actual) {
        assertThat(expected)
            .as("Verify CitizenTable relationships")
            .satisfies(e -> assertThat(e.getFamilyId()).as("check familyId").isEqualTo(actual.getFamilyId()));
    }
}
